# Define a function to calculate Euclidean distance between two points
euclidean_distance <- function(point1, point2) {
  return(sqrt(sum((point1 - point2)^2)))
}

# Define a function to identify mutual nearest neighbors within a given radius
mutual_neighbors <- function(dataset, point_index, radius, distances) {
  # Retrieve precomputed distances for the current point
  point_distances <- distances[point_index, ]
  
  # Identify points within the radius
  neighbor_indices <- which(point_distances <= radius & !is.na(point_distances))
  
  # Filter to mutual neighbors
  mutual_neighbors <- neighbor_indices[sapply(neighbor_indices, function(j) {
    sum(distances[j, ] <= radius, na.rm = TRUE) > 1
  })]
  
  return(mutual_neighbors)
}

# Define a function to execute the ROCK clustering algorithm
perform_ROCK_clustering <- function(dataset, num_clusters, radius) {
  # Precompute all distances to improve efficiency
  distances <- as.matrix(dist(dataset, method = "euclidean"))
  diag(distances) <- NA  # Set self-distances to NA to exclude self in neighbor search
  
  # Initialize clusters
  clusters <- rep(0, nrow(dataset))
  current_cluster <- 1
  
  # Loop through each data point
  for (point_index in 1:nrow(dataset)) {
    if (clusters[point_index] == 0) {
      # Find mutual nearest neighbors
      neighbors <- mutual_neighbors(dataset, point_index, radius, distances)
      
      if (length(neighbors) >= num_clusters) {
        # Assign the point and its neighbors to the same cluster
        clusters[c(point_index, neighbors)] <- current_cluster
        current_cluster <- current_cluster + 1
      }
    }
  }
  
  return(clusters)
}

# Load the dataset
student_data <- read.csv("C:/Users/Sanket Chavhan/Documents/22MIS1116 DMT 2/student-scores.csv")

# Select the numerical columns for clustering (adjust column names as needed)
numeric_data <- student_data[, c("math_score", "english_score")] # Example column names

# Normalize the data
normalized_data <- scale(numeric_data)

# Set parameters for ROCK clustering
desired_clusters <- 3  # Decreased from 5 to 3
neighborhood_radius <- 1  # Increased from 0.5 to 1

# Apply ROCK clustering to the normalized data
assigned_clusters <- perform_ROCK_clustering(normalized_data, desired_clusters, neighborhood_radius)

# Open a new plotting device
dev.new()

# Visualize the clustered data
plot(normalized_data, col = assigned_clusters + 1, pch = 19,  # Add 1 to avoid using color 0
     main = "Student Score Clustering", xlab = "Math Score", 
     ylab = "English Score")

# Add a legend for the clusters
legend("topright", legend = unique(assigned_clusters), 
       col = 1:length(unique(assigned_clusters)) + 1, pch = 19,  # Add 1 to avoid using color 0
       title = "Clusters")

# Validate the clustering
any(is.na(normalized_data))
any(is.infinite(normalized_data))
any(assigned_clusters == 0)
